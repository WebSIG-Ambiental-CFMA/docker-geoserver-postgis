* geoserver_utils.py
** Classe geoserver_connection
   - Parâmetros do construtor:
     - ~host~: string contendo IP ou alias para o host do GeoServer;
     - ~port~: string contendo número da porta em que o GeoServer
       aceita conexões;
     - ~username~: string contendo o nome do usuario que pode
       estabelecer uma conexão com o GeoServer;
     - ~password~: string contendo a senha do usuario no servidor
       GeoServer.
   - Os métodos dessa classe não precisam ser utilizados pelo usuário.
   - O usuário deve instanciar um objeto dessa classe para representar
     uma conexão com o GeoServer. Tal objeto é requerido como
     argumento pelas funções descritas a seguir.
** Classe postgis_database_info
   - Parâmetros do construtor:
     - ~name~: string contendo o nome da database;
     - ~host~: string contendo IP ou alias para o host do PostGIS;
     - ~port~: string contendo número da porta em que o PostGIS aceita conexões;
     - ~user~: string contendo o nome do usuário que pode acessar a
       database no PostGIS;
     - ~password~: string contendo a senha do usuário no servidor PostGIS.
   - Os métodos dessa classe não precisams ser utilizados pelo usuário.
   - O usuário deve instanciar um objeto dessa classe para representar
     uma database em um servidor PostGIS que deseje utilizar no
     servidor GeoServer. Tal objeto é requerido como argumento por
     algumas funções descritas a seguir.
** Função create_workspace_if_not_found
   - Parâmetros:
     - ~conn~: um objeto da classe geoserver_connection;
     - ~workspace_name~: string contendo o nome da workspace a ser
       criada no servidor GeoServer.
   - Comportamento: verifica se uma workspace chamada ~workspace_name~
     existe no servidor representado por ~conn~: caso exista, não faz
     nada; caso não exista, cria uma workspace chamada ~workspace_name~.
   - Retorno: valor booleano indicando se a workspace foi criada.
** Função create_database_store_into_workspace_if_not_found
   - Parâmetros:
     - ~conn~: um objeto da classe geoserver_connection;
     - ~workspace_name~: string contendo o nome da workspace em que a
       database store será registrada;
     - ~db_info~: um objeto da classe postgis_database_info.
   - Comportamento: verifica se há uma workspace ~workspace_name~ no
     servidor representado por ~conn~. Em caso negativo, não faz
     nada. Em caso afirmativo, verifica se há uma database store na
     workspace ~workspace_name~ com o mesmo nome da representada por
     ~db_info~. Em caso afirmativo, não faz nada. Em caso negativo,
     cria uma database store na workspace ~workspace_name~ para
     representar ~db_info~.
   - Retorno: valor booleano indicando se a database store foi criada.
** Função publish_table_from_workspace_database_store
   - Parâmetros:
     - ~conn~: um objeto da classe geoserver_connection;
     - ~workspace_name~: string contendo o nome da workspace que
       contém a database store que contém a tabela;
     - ~db_info~: um objeto da classe postgis_database_info.
     - ~table_name~: string contendo o nome da tabela, contida na
       database representada por ~db_info~, a ser publicada.
   - Comportamento: a existência da workspace ~workspace_name~ e da
     database store representada por ~db_info~ não é verificada. A
     requisição REST para a publicação da tabela ~table_name~ na
     workspace ~workspace_name~ é realizada.
   - Retorno: valor booleano indicando se a tabela foi publicada.

* postgis_utils.py
** Classe postgis_connection
   - Parâmetros do construtor:
     - ~host~: string contendo IP ou alias para o host do PostGIS;
     - ~port~: string contendo número da porta em que o PostGIS aceita
       conexões;
     - ~database~: string contendo o nome da database em que a conexão
       deve ser realizada;
     - ~user~: string contendo o nome do usuário no servidor PostGIS;
     - ~password~: string contendo a senha do usuário no servidor PostGIS.
   - Métodos:
     - ~execute_statement~:
       - Parâmetros:
         - ~sql_statement~: string contendo comando sql a ser
           executado no banco de dados representado por esta conexão.
       - Comportamento: tenta realizar a execução do comando sql
         recebido. Em caso de falha, reverte o banco de dados para seu
         estado anterior. Em caso de sucesso, retorna uma lista
         contendo os resultados gerados pelo comando sql.
       - Retorno: lista de resultados do comando sql. Em caso de falha
         ou de o comando sql não produzir resultados, a lista será vazia.
     - ~execute_sql_script~:
       - Parâmetros:
         - ~sql_filename~: string contendo o nome do arquivo com
           comandos sql a serem executados no banco de daods
           representado por esta conexão.
       - Comportamento: abre o arquivo ~sql_filename~ e lê seu
         conteúdo, fechando o arquivo em seguida. O conteúdo lido é
         passado como um comando sql para o método.
         ~execute_statement~.
       - Retorno: resultados retornados por ~execute_statement~.
     - ~close~:
       - Parâmetros: nenhum.
       - Comportamento: fecha a conexão mantida por esta classe, isto
         é, após uma chamada deste método, o referido perde sua
         utilidade.
       - Retorno: nenhum.
